From 5f60ff25d7354d4f2efd04bfd269a31a63f44793 Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Wed, 14 Jun 2023 11:36:55 +0200
Subject: [PATCH 3/6] Export functions in google::compiler::java::names

---
 src/google/protobuf/compiler/java/names.h | 26 +++++++++++------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/src/google/protobuf/compiler/java/names.h b/src/google/protobuf/compiler/java/names.h
index c2eb34cb3..426742a04 100644
--- a/src/google/protobuf/compiler/java/names.h
+++ b/src/google/protobuf/compiler/java/names.h
@@ -41,35 +41,35 @@ namespace java {
 //
 // Returns:
 //   The fully-qualified Java class name.
-std::string ClassName(const Descriptor* descriptor);
+PROTOC_EXPORT std::string ClassName(const Descriptor* descriptor);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   The fully-qualified Java class name.
-std::string ClassName(const EnumDescriptor* descriptor);
+PROTOC_EXPORT std::string ClassName(const EnumDescriptor* descriptor);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   The fully-qualified Java class name.
-std::string ClassName(const FileDescriptor* descriptor);
+PROTOC_EXPORT std::string ClassName(const FileDescriptor* descriptor);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   The fully-qualified Java class name.
-std::string ClassName(const ServiceDescriptor* descriptor);
+PROTOC_EXPORT std::string ClassName(const ServiceDescriptor* descriptor);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   Java package name.
-std::string FileJavaPackage(const FileDescriptor* descriptor,
+PROTOC_EXPORT std::string FileJavaPackage(const FileDescriptor* descriptor,
                             Options options = {});
 
 // Requires:
@@ -77,51 +77,51 @@ std::string FileJavaPackage(const FileDescriptor* descriptor,
 //
 // Returns:
 //   Java package directory.
-std::string JavaPackageDirectory(const FileDescriptor* file);
+PROTOC_EXPORT std::string JavaPackageDirectory(const FileDescriptor* file);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   The unqualified Java class name.
-std::string FileClassName(const FileDescriptor* file);
+PROTOC_EXPORT std::string FileClassName(const FileDescriptor* file);
 
 // Requires:
 //   descriptor != NULL
 // Returns:
 //   Capitalized camel case field name.
-std::string CapitalizedFieldName(const FieldDescriptor* field);
+PROTOC_EXPORT std::string CapitalizedFieldName(const FieldDescriptor* field);
 
 // Requires:
 //   descriptor != NULL
 // Returns:
 //   Capitalized camel case oneof name.
-std::string CapitalizedOneofName(const OneofDescriptor* oneof);
+PROTOC_EXPORT std::string CapitalizedOneofName(const OneofDescriptor* oneof);
 
 // Returns:
 //   Converts a name to camel-case. If cap_first_letter is true, capitalize the
 //   first letter.
-std::string UnderscoresToCamelCase(absl::string_view input,
+PROTOC_EXPORT std::string UnderscoresToCamelCase(absl::string_view input,
                                    bool cap_next_letter);
 // Requires:
 //   field != NULL
 // Returns:
 //   Converts the field's name to camel-case, e.g. "foo_bar_baz" becomes
 //   "fooBarBaz" or "FooBarBaz", respectively.
-std::string UnderscoresToCamelCase(const FieldDescriptor* field);
+PROTOC_EXPORT std::string UnderscoresToCamelCase(const FieldDescriptor* field);
 
 // Requires:
 //   method != NULL
 // Returns:
 //   Similar, but for method names.  (Typically, this merely has the effect
 //   of lower-casing the first letter of the name.)
-std::string UnderscoresToCamelCase(const MethodDescriptor* method);
+PROTOC_EXPORT std::string UnderscoresToCamelCase(const MethodDescriptor* method);
 
 // Requires:
 //   field != NULL
 // Returns:
 //   Same as UnderscoresToCamelCase, but checks for reserved keywords
-std::string UnderscoresToCamelCaseCheckReserved(const FieldDescriptor* field);
+PROTOC_EXPORT std::string UnderscoresToCamelCaseCheckReserved(const FieldDescriptor* field);
 
 
 }  // namespace java
