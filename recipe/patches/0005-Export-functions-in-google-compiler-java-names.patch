From 3a047d8d43d088cf07911d87eca1aa7d4c9b69de Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Wed, 14 Jun 2023 11:36:55 +0200
Subject: [PATCH 5/6] Export functions in google::compiler::java::names

---
 src/google/protobuf/compiler/java/names.h | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/src/google/protobuf/compiler/java/names.h b/src/google/protobuf/compiler/java/names.h
index ddfc8e65d..f26004cd7 100644
--- a/src/google/protobuf/compiler/java/names.h
+++ b/src/google/protobuf/compiler/java/names.h
@@ -63,67 +63,67 @@ namespace java {
 //
 // Returns:
 //   The fully-qualified Java class name.
-std::string ClassName(const Descriptor* descriptor);
+PROTOC_EXPORT std::string ClassName(const Descriptor* descriptor);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   The fully-qualified Java class name.
-std::string ClassName(const EnumDescriptor* descriptor);
+PROTOC_EXPORT std::string ClassName(const EnumDescriptor* descriptor);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   The fully-qualified Java class name.
-std::string ClassName(const FileDescriptor* descriptor);
+PROTOC_EXPORT std::string ClassName(const FileDescriptor* descriptor);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   The fully-qualified Java class name.
-std::string ClassName(const ServiceDescriptor* descriptor);
+PROTOC_EXPORT std::string ClassName(const ServiceDescriptor* descriptor);
 
 // Requires:
 //   descriptor != NULL
 //
 // Returns:
 //   Java package name.
-std::string FileJavaPackage(const FileDescriptor* descriptor,
+PROTOC_EXPORT std::string FileJavaPackage(const FileDescriptor* descriptor,
                             Options options = {});
 
 // Requires:
 //   descriptor != NULL
 // Returns:
 //   Capitalized camel case name field name.
-std::string CapitalizedFieldName(const FieldDescriptor* descriptor);
+PROTOC_EXPORT std::string CapitalizedFieldName(const FieldDescriptor* descriptor);
 
 // Returns:
 //   Converts a name to camel-case. If cap_first_letter is true, capitalize the
 //   first letter.
-std::string UnderscoresToCamelCase(absl::string_view input,
+PROTOC_EXPORT std::string UnderscoresToCamelCase(absl::string_view input,
                                    bool cap_next_letter);
 // Requires:
 //   field != NULL
 // Returns:
 //   Converts the field's name to camel-case, e.g. "foo_bar_baz" becomes
 //   "fooBarBaz" or "FooBarBaz", respectively.
-std::string UnderscoresToCamelCase(const FieldDescriptor* field);
+PROTOC_EXPORT std::string UnderscoresToCamelCase(const FieldDescriptor* field);
 
 // Requires:
 //   method != NULL
 // Returns:
 //   Similar, but for method names.  (Typically, this merely has the effect
 //   of lower-casing the first letter of the name.)
-std::string UnderscoresToCamelCase(const MethodDescriptor* method);
+PROTOC_EXPORT std::string UnderscoresToCamelCase(const MethodDescriptor* method);
 
 // Requires:
 //   field != NULL
 // Returns:
 //   Same as UnderscoresToCamelCase, but checks for reserved keywords
-std::string UnderscoresToCamelCaseCheckReserved(const FieldDescriptor* field);
+PROTOC_EXPORT std::string UnderscoresToCamelCaseCheckReserved(const FieldDescriptor* field);
 
 
 }  // namespace java
