From 71b88e6595f2a587a3c3b3279b46dfe6d7c811f1 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Sun, 2 Mar 2025 22:14:34 +1100
Subject: [PATCH 7/7] export symbols needed by grpc

avoid that the potentially inlined IsDefaultSerializationDeterministic
inherits a linker reference to default_serialization_deterministic_, which,
while part of the .dll/.lib, is private and may not be linkable directly
---
 src/google/protobuf/io/coded_stream.cc | 4 ++++
 src/google/protobuf/io/coded_stream.h  | 5 +----
 upb/mem/alloc.h                        | 2 +-
 upb/mem/internal/arena.h               | 2 ++
 4 files changed, 8 insertions(+), 5 deletions(-)

diff --git a/src/google/protobuf/io/coded_stream.cc b/src/google/protobuf/io/coded_stream.cc
index f8d7b71a1..92b82b04a 100644
--- a/src/google/protobuf/io/coded_stream.cc
+++ b/src/google/protobuf/io/coded_stream.cc
@@ -1019,6 +1019,10 @@ uint8_t* EpsCopyOutputStream::WriteCordOutline(const absl::Cord& c, uint8_t* ptr
 std::atomic<bool> CodedOutputStream::default_serialization_deterministic_{
     false};
 
+bool CodedOutputStream::IsDefaultSerializationDeterministic() {
+  return default_serialization_deterministic_.load(std::memory_order_relaxed) != 0;
+}
+
 CodedOutputStream::~CodedOutputStream() { Trim(); }
 
 uint8_t* CodedOutputStream::WriteCordToArray(const absl::Cord& cord,
diff --git a/src/google/protobuf/io/coded_stream.h b/src/google/protobuf/io/coded_stream.h
index dc03435b2..70435c971 100644
--- a/src/google/protobuf/io/coded_stream.h
+++ b/src/google/protobuf/io/coded_stream.h
@@ -1255,10 +1255,7 @@ class PROTOBUF_EXPORT CodedOutputStream {
     return impl_.IsSerializationDeterministic();
   }
 
-  static bool IsDefaultSerializationDeterministic() {
-    return default_serialization_deterministic_.load(
-               std::memory_order_relaxed) != 0;
-  }
+  static bool IsDefaultSerializationDeterministic();
 
   template <typename Func>
   void Serialize(const Func& func);
diff --git a/upb/mem/alloc.h b/upb/mem/alloc.h
index 441731d2d..8f46e9afd 100644
--- a/upb/mem/alloc.h
+++ b/upb/mem/alloc.h
@@ -52,7 +52,7 @@ UPB_INLINE void upb_free(upb_alloc* alloc, void* ptr) {
 
 // The global allocator used by upb. Uses the standard malloc()/free().
 
-extern upb_alloc upb_alloc_global;
+UPB_API extern upb_alloc upb_alloc_global;
 
 /* Functions that hard-code the global malloc.
  *
diff --git a/upb/mem/internal/arena.h b/upb/mem/internal/arena.h
index 9a6469edc..796763a3f 100644
--- a/upb/mem/internal/arena.h
+++ b/upb/mem/internal/arena.h
@@ -49,6 +49,8 @@ UPB_INLINE size_t UPB_PRIVATE(_upb_ArenaHas)(const struct upb_Arena* a) {
   return (size_t)(a->UPB_ONLYBITS(end) - a->UPB_ONLYBITS(ptr));
 }
 
+UPB_API void* UPB_PRIVATE(_upb_Arena_SlowMalloc)(struct upb_Arena * a, size_t size);
+
 UPB_API_INLINE void* upb_Arena_Malloc(struct upb_Arena* a, size_t size) {
   void* UPB_PRIVATE(_upb_Arena_SlowMalloc)(struct upb_Arena * a, size_t size);
 
